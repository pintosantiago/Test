/**
 * Hypechat
 * A simple API to make a resilient chat app for workspaces. Feel free to check our [github repository](https://github.com/taller2fiubafedmanmatsan/AppServer) for more information.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: llauromanuel@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.4
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/Body1', 'model/Body2', 'model/Body3', 'model/Body4', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/User', 'api/AuthenticationApi', 'api/HealthcheckApi', 'api/UsersApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Body'), require('./model/Body1'), require('./model/Body2'), require('./model/Body3'), require('./model/Body4'), require('./model/InlineResponse200'), require('./model/InlineResponse2001'), require('./model/User'), require('./api/AuthenticationApi'), require('./api/HealthcheckApi'), require('./api/UsersApi'));
  }
}(function(ApiClient, Body, Body1, Body2, Body3, Body4, InlineResponse200, InlineResponse2001, User, AuthenticationApi, HealthcheckApi, UsersApi) {
  'use strict';

  /**
   * A_simple_API_to_make_a_resilient_chat_app_for_workspaces__Feel_free_to_check_our__github_repository_httpsgithub_comtaller2fiubafedmanmatsanAppServer_for_more_information_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Hypechat = require('index'); // See note below*.
   * var xxxSvc = new Hypechat.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Hypechat.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Hypechat.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Hypechat.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Body model constructor.
     * @property {module:model/Body}
     */
    Body: Body,
    /**
     * The Body1 model constructor.
     * @property {module:model/Body1}
     */
    Body1: Body1,
    /**
     * The Body2 model constructor.
     * @property {module:model/Body2}
     */
    Body2: Body2,
    /**
     * The Body3 model constructor.
     * @property {module:model/Body3}
     */
    Body3: Body3,
    /**
     * The Body4 model constructor.
     * @property {module:model/Body4}
     */
    Body4: Body4,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The InlineResponse2001 model constructor.
     * @property {module:model/InlineResponse2001}
     */
    InlineResponse2001: InlineResponse2001,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The AuthenticationApi service constructor.
     * @property {module:api/AuthenticationApi}
     */
    AuthenticationApi: AuthenticationApi,
    /**
     * The HealthcheckApi service constructor.
     * @property {module:api/HealthcheckApi}
     */
    HealthcheckApi: HealthcheckApi,
    /**
     * The UsersApi service constructor.
     * @property {module:api/UsersApi}
     */
    UsersApi: UsersApi
  };

  return exports;
}));
